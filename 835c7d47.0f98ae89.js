(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return d}));var a=n(2),o=n(6),r=(n(0),n(90)),l={id:"tutorial_apollo_server_express",title:"Apollo Server Express"},s={unversionedId:"tutorial_apollo_server_express",id:"tutorial_apollo_server_express",isDocsHomePage:!1,title:"Apollo Server Express",description:"This tutorial assumes Apollo Server Express backend was selected. If Hasura was selected, check out the Hasura version.",source:"@site/docs/tutorial_apollo_server_express.md",slug:"/tutorial_apollo_server_express",permalink:"/docs/tutorial_apollo_server_express",editUrl:"https://github.com/tiagob/create-full-stack/edit/master/packages/docusaurus/docs/tutorial_apollo_server_express.md",version:"current",sidebar:"someSidebar",previous:{title:"Troubleshooting",permalink:"/docs/troubleshooting"},next:{title:"Hasura",permalink:"/docs/tutorial_hasura"}},i=[{value:"Backend",id:"backend",children:[]},{value:"Common",id:"common",children:[]},{value:"Web",id:"web",children:[]},{value:"Mobile",id:"mobile",children:[]}],c={rightToc:i};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This tutorial assumes ",Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"/docs/backend#apollo-server-express"}),"Apollo Server Express backend")," was selected. If Hasura was selected, check out the ",Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"/docs/tutorial_hasura"}),"Hasura version"),".")),Object(r.b)("p",null,"In this tutorial we'll add an optional due date for todos."),Object(r.b)("p",null,"Learn how to:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Navigate your full stack"),Object(r.b)("li",{parentName:"ul"},"Make cross platform changes")),Object(r.b)("h2",{id:"backend"},"Backend"),Object(r.b)("p",null,"We need to add the date column to Postgres and include it in the schema. The GraphQL resolver is written in a generic enough way that it will handle this change without modification."),Object(r.b)("p",null,"Add the date column to ",Object(r.b)("inlineCode",{parentName:"p"},"packages/server/src/entity/Todo.ts"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'  // ...\n\n  @Column({ type: "date", nullable: true })\n  date!: Date | null;\n}\n')),Object(r.b)("p",null,"Update the GraphQL schema at ",Object(r.b)("inlineCode",{parentName:"p"},"packages/server/src/graphql/schema.ts"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"# Add custom GraphQL scalar\n# https://www.apollographql.com/docs/apollo-server/schema/scalars-enums/#date-as-a-scalar\nscalar Date\n\ntype Todo {\n  id: Int!\n  name: String!\n  complete: Boolean!\n  # Include the date in the Todo Entity\n  date: Date\n}\n\ntype Query {\n  todos: [Todo!]!\n}\n\ntype Mutation {\n  # Add optional (no appended '!') date input\n  createTodo(name: String!, date: Date): Todo!\n  updateTodo(id: Int!, name: String, complete: Boolean): Todo\n  deleteTodo(id: Int!): Todo\n}\n")),Object(r.b)("p",null,"That's it!"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Since ",Object(r.b)("inlineCode",{parentName:"em"},"synchronize: true")," is set in ",Object(r.b)("inlineCode",{parentName:"em"},"packages/server/ormconfig.js"),", changes to ",Object(r.b)("inlineCode",{parentName:"em"},"packages/server/src/entity/Todo.ts")," will automatically sync to the database. Learn more about migrations on the ",Object(r.b)("a",Object(a.a)({parentName:"em"},{href:"https://typeorm.io/#/migrations/how-migrations-work"}),"TypeORM docs"),". To see how GraphQL requests are resolved check out ",Object(r.b)("inlineCode",{parentName:"em"},"packages/server/src/getResolvers.ts"),".")),Object(r.b)("h2",{id:"common"},"Common"),Object(r.b)("p",null,"Common contains shared code across the full stack. It's used on the Apollo Server Express backend for testing. It's used for client Apollo GraphQL requests from both web and mobile."),Object(r.b)("p",null,'Update the GraphQL query and create mutation requests to include "date".'),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"packages/common/src/graphql/todos.graphql")," update to:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"# Add a date scalar. This is defined on the backend\n# Apollo Server Express scalar docs:\n# https://www.apollographql.com/docs/apollo-server/schema/scalars-enums/#date-as-a-scalar\nscalar Date\n\nquery Todos {\n  todos {\n    id\n    name\n    complete\n    date\n  }\n}\n\nmutation CreateTodo($name: String!, $date: Date) {\n  createTodo(name: $name, date: $date) {\n    id\n    name\n    complete\n    date\n  }\n}\n")),Object(r.b)("p",null,"That's it!"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"When your run ",Object(r.b)("inlineCode",{parentName:"em"},"yarn start")," from the root of the project TS code is generated and ",Object(r.b)("inlineCode",{parentName:"em"},"packages/common")," is built automatically. See ",Object(r.b)("a",Object(a.a)({parentName:"em"},{href:"https://graphql-code-generator.com/"}),"graphql-code-generator")," to learn how this works.")),Object(r.b)("h2",{id:"web"},"Web"),Object(r.b)("p",null,"If ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/web"}),"web")," was included, then follow these steps to configure it for the new todo date field."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"We're using the ",Object(r.b)("a",Object(a.a)({parentName:"em"},{href:"https://material-ui-pickers.dev/getting-started/installation"}),"Material-UI Pickers library")," for the date picker. This has a couple dependencies.")),Object(r.b)("p",null,"First, install the packages:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd packages/web/\nyarn add @date-io/date-fns@1.x date-fns @material-ui/pickers\n")),Object(r.b)("p",null,"Add ",Object(r.b)("inlineCode",{parentName:"p"},"MuiPickersUtilsProvider")," to ",Object(r.b)("inlineCode",{parentName:"p"},"packages/web/src/App.tsx"),":"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"This tells pickers which date management library it should use with MuiPickersUtilsProvider. This component takes a utils prop, and makes it available down the React tree with React Context. It should be used at the root of your component tree, or at the highest level you wish the pickers to be available.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'// Add the imports\nimport DateFnsUtils from "@date-io/date-fns";\nimport { MuiPickersUtilsProvider } from "@material-ui/pickers";\n\n// ...\n\n   return (\n     <ApolloProvider client={apolloClient}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Router>\n          {\n            // ...\n          }\n        </Router>\n      </MuiPickersUtilsProvider>\n     </ApolloProvider>\n   );\n }\n')),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"packages/web/src/components/CreateTodo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'// ...\n// Add the import\nimport { KeyboardDatePicker } from "@material-ui/pickers";\n\nexport default function CreateTodo() {\n  const [name, setName] = useState("");\n  const [createTodo, { loading }] = useCreateTodo();\n  // Use a react hook to store the input date state.\n  // Dates are optional. If not set, the value is null.\n  const [date, setDate] = useState<Date | null>(null);\n\n  function onSubmit() {\n    // Add "date" to the createTodo variables\n    createTodo({ variables: { name, date } });\n    setName("");\n    // Reset the input date to null after submission\n    setDate(null);\n  }\n\n  return (\n    <TextField\n      // ...\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position="end">\n            <KeyboardDatePicker\n              disableToolbar\n              variant="inline"\n              format="M/dd/yyyy"\n              margin="normal"\n              label="Date"\n              value={date}\n              onChange={setDate}\n              KeyboardButtonProps={{\n                "aria-label": "change date",\n              }}\n            />\n            <IconButton aria-label="add" onClick={onSubmit} disabled={loading}>\n              <AddIcon />\n            </IconButton>\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n}\n')),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"ListItemText")," in ",Object(r.b)("inlineCode",{parentName:"p"},"packages/web/src/components/Todo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<ListItemText\n  // If date is set, display it in the todo item\n  primary={`${todo.name}${\n    // toLocaleDateString("en-US") uses "M/dd/yyyy" date formatting\n    todo.date ? ` (${new Date(todo.date).toLocaleDateString("en-US")})` : ""\n  }`}\n  classes={todo.complete ? { primary: classes.complete } : undefined}\n/>\n')),Object(r.b)("p",null,"Kill and restart the full stack (required when libraries are added):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"^C # Ctrl-C\nyarn start\n")),Object(r.b)("p",null,"Navigate to http://localhost:3000. You should see your new todo date field! \ud83c\udf89"),Object(r.b)("img",{alt:"Add date web",src:"/img/add_date_web.png",width:"512"}),Object(r.b)("h2",{id:"mobile"},"Mobile"),Object(r.b)("p",null,"If ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/mobile"}),"mobile")," was included, then follow these steps to configure it for the new todo date field."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"We're using the ",Object(r.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/mmazzarolo/react-native-modal-datetime-picker"}),"react-native-modal-datetime-picker")," for the date picker.")),Object(r.b)("p",null,"First, install the package and dependency:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd packages/mobile/\nyarn expo install react-native-modal-datetime-picker @react-native-community/datetimepicker\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"We're using ",Object(r.b)("inlineCode",{parentName:"em"},"yarn expo install")," to ensure Expo supported versions of the libraries are used. Since Expo uses native code in its SDK, typically only a single version of a library with native dependencies can be used per version of Expo. Expo handles this mapping with its install command. Learn more on the ",Object(r.b)("a",Object(a.a)({parentName:"em"},{href:"https://docs.expo.io/workflow/expo-cli/"}),"Expo docs"),".")),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"packages/mobile/src/components/CreateTodo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'// ...\n// Add the import\nimport { Text, TouchableOpacity } from "react-native";\nimport DateTimePickerModal from "react-native-modal-datetime-picker";\n\nconst styles = StyleSheet.create({\n  // ...\n  row: {\n    display: "flex",\n    flexDirection: "row",\n  },\n});\n\nexport default function CreateTodo() {\n  const [name, setName] = useState("");\n  const [createTodo] = useCreateTodo();\n  // Use a react hook to store the input date state.\n  // Dates are optional. If not set, the value is null.\n  const [date, setDate] = useState<Date | null>(null);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n\n  function onSubmit() {\n    // Add "date" to the createTodo variables\n    createTodo({ variables: { name, date } });\n    setName("");\n    // Reset the input date to null after submission\n    setDate(null);\n  }\n\n  return (\n    <View style={styles.root}>\n      <Input\n        placeholder="What needs to be done?"\n        value={name}\n        onChangeText={(text: string) => setName(text)}\n        onSubmitEditing={onSubmit}\n        rightIcon={\n          <View style={styles.row}>\n            <TouchableOpacity\n              style={styles.row}\n              accessibilityLabel="date"\n              onPress={() => setShowDatePicker(true)}\n            >\n              <Text>\n                {\n                  // toLocaleDateString("en-US") uses "M/dd/yyyy" date formatting\n                  date?.toLocaleDateString("en-US")\n                }\n              </Text>\n              <Icon name="event" />\n            </TouchableOpacity>\n            <Icon name="add" accessibilityLabel="submit" onPress={onSubmit} />\n          </View>\n        }\n      />\n      <DateTimePickerModal\n        isVisible={showDatePicker}\n        mode="date"\n        onConfirm={(dueDate) => {\n          setDate(dueDate);\n          setShowDatePicker(false);\n        }}\n        onCancel={() => {\n          setDate(null);\n          setShowDatePicker(false);\n        }}\n      />\n    </View>\n  );\n}\n')),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"ListItem.Title")," in ",Object(r.b)("inlineCode",{parentName:"p"},"packages/mobile/src/components/Todo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<ListItem.Title style={todo.complete ? styles.lineThrough : undefined}>\n  {\n    // If date is set, display it in the todo item\n    `${todo.name}${\n      // toLocaleDateString("en-US") uses "M/dd/yyyy" date formatting\n      todo.date ? ` (${new Date(todo.date).toLocaleDateString("en-US")})` : ""\n    }`\n  }\n</ListItem.Title>\n')),Object(r.b)("p",null,"Kill and restart the full stack (required when libraries are added):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"^C # Ctrl-C\nyarn start\n")),Object(r.b)("p",null,"Navigate to http://localhost:19002/ and bring up the application. You should see your new todo date field! \ud83c\udf89"),Object(r.b)("img",{alt:"Add date mobile",src:"/img/add_date_mobile.png",height:"512"}))}d.isMDXComponent=!0},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,m=p["".concat(l,".").concat(u)]||p[u]||b[u]||r;return n?o.a.createElement(m,s(s({ref:t},c),{},{components:n})):o.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);