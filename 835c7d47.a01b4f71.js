(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{70:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return d}));var n=a(2),o=a(6),r=(a(0),a(90)),s={id:"tutorial_apollo_server_express",title:"Apollo Server Express",image:"/img/logo.svg"},i={unversionedId:"tutorial_apollo_server_express",id:"tutorial_apollo_server_express",isDocsHomePage:!1,title:"Apollo Server Express",description:"This tutorial assumes Apollo Server Express backend was selected. If Hasura was selected, check out the Hasura version.",source:"@site/docs/tutorial_apollo_server_express.md",slug:"/tutorial_apollo_server_express",permalink:"/docs/tutorial_apollo_server_express",editUrl:"https://github.com/tiagob/create-full-stack/edit/master/packages/docusaurus/docs/tutorial_apollo_server_express.md",version:"current",sidebar:"someSidebar",previous:{title:"Troubleshooting",permalink:"/docs/troubleshooting"},next:{title:"Hasura",permalink:"/docs/tutorial_hasura"}},l=[{value:"Backend",id:"backend",children:[]},{value:"Common",id:"common",children:[]},{value:"Web",id:"web",children:[]},{value:"Mobile",id:"mobile",children:[]}],c={rightToc:l};function d(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This tutorial assumes ",Object(r.b)("a",Object(n.a)({parentName:"strong"},{href:"/docs/backend#apollo-server-express"}),"Apollo Server Express backend")," was selected. If Hasura was selected, check out the ",Object(r.b)("a",Object(n.a)({parentName:"strong"},{href:"/docs/tutorial_hasura"}),"Hasura version"),".")),Object(r.b)("p",null,"In this tutorial we'll add an optional due date for todos."),Object(r.b)("p",null,"Learn how to:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Navigate your full stack"),Object(r.b)("li",{parentName:"ul"},"Make cross platform changes")),Object(r.b)("h2",{id:"backend"},"Backend"),Object(r.b)("p",null,"We need to add the date column to Postgres and include it in the schema. The GraphQL resolver is written in a generic enough way that it will handle this change without modification."),Object(r.b)("p",null,"Add the date column to ",Object(r.b)("inlineCode",{parentName:"p"},"packages/server/src/entity/Todo.ts"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'  // ...\n\n  @Column({ type: "date", nullable: true })\n  date!: Date | null;\n}\n')),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"em"},"packages/server/src/entity/Todo.ts")," contains the Postgres definition for the ",Object(r.b)("inlineCode",{parentName:"em"},"todos")," table. This is called a ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://typeorm.io/#/entities/what-is-entity"}),'TypeORM "entity"'),". Entity is a class that maps to a database table.")),Object(r.b)("p",null,"Update the GraphQL schema at ",Object(r.b)("inlineCode",{parentName:"p"},"packages/server/src/graphql/schema.ts"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"# Add custom GraphQL scalar\n# https://www.apollographql.com/docs/apollo-server/schema/scalars-enums/#date-as-a-scalar\nscalar Date\n\ntype Todo {\n  id: Int!\n  name: String!\n  complete: Boolean!\n  # Include the date in the Todo Entity\n  date: Date\n}\n\ntype Query {\n  todos: [Todo!]!\n}\n\ntype Mutation {\n  # Add optional (no appended '!') date input\n  createTodo(name: String!, date: Date): Todo!\n  updateTodo(id: Int!, name: String, complete: Boolean): Todo\n  deleteTodo(id: Int!): Todo\n}\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"em"},"packages/server/src/graphql/schema.ts")," contains the GraphQL ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://www.apollographql.com/docs/apollo-server/schema/schema/"}),"schema")," that Apollo Server Express uses. Your GraphQL server uses a schema to describe the shape of your data graph. This schema defines a hierarchy of types with fields that are populated from your back-end data stores. The schema also specifies exactly which queries and mutations are available for clients to execute against your data graph.")),Object(r.b)("p",null,"That's it!"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Since ",Object(r.b)("inlineCode",{parentName:"em"},"synchronize: true")," is set in ",Object(r.b)("inlineCode",{parentName:"em"},"packages/server/ormconfig.js"),", changes to ",Object(r.b)("inlineCode",{parentName:"em"},"packages/server/src/entity/Todo.ts")," will automatically sync to the database. Learn more about migrations on the ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://typeorm.io/#/migrations/how-migrations-work"}),"TypeORM docs"),". To see how GraphQL requests are resolved check out ",Object(r.b)("inlineCode",{parentName:"em"},"packages/server/src/getResolvers.ts")," and the ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://www.apollographql.com/docs/apollo-server/data/resolvers/"}),"resolver docs"),".")),Object(r.b)("h2",{id:"common"},"Common"),Object(r.b)("p",null,"Common contains shared code across the full stack. It's used for client Apollo GraphQL requests from both web and mobile. It's also used on the Apollo Server Express backend for testing."),Object(r.b)("p",null,"Update the GraphQL ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://graphql.org/learn/queries/"}),"query")," and create ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://graphql.org/learn/queries/#mutations"}),"mutation"),' requests to include "date".'),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"packages/common/src/graphql/todos.graphql")," update to:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"# Add a date scalar. This is defined on the backend\n# Apollo Server Express scalar docs:\n# https://www.apollographql.com/docs/apollo-server/schema/scalars-enums/#date-as-a-scalar\nscalar Date\n\nquery Todos {\n  todos {\n    id\n    name\n    complete\n    # Add the date to the todos query\n    date\n  }\n}\n\n# Add date to the mutation input fields\nmutation CreateTodo($name: String!, $date: Date) {\n  createTodo(name: $name, date: $date) {\n    id\n    name\n    complete\n    # Add date to the mutation response\n    date\n  }\n}\n")),Object(r.b)("p",null,"That's it!"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"When your run ",Object(r.b)("inlineCode",{parentName:"em"},"yarn start")," from the root of the project TS code is generated and ",Object(r.b)("inlineCode",{parentName:"em"},"packages/common")," is built automatically. See ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://graphql-code-generator.com/"}),"graphql-code-generator")," to learn how this works.")),Object(r.b)("h2",{id:"web"},"Web"),Object(r.b)("p",null,"If ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/web"}),"web")," was included, then follow these steps to configure it for the new todo date field."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"We're using the ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://material-ui-pickers.dev/getting-started/installation"}),"Material-UI Pickers library")," for the date picker. This has a couple dependencies.")),Object(r.b)("p",null,"First, install the packages:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cd packages/web/\nyarn add @date-io/date-fns@1.x date-fns @material-ui/pickers\n")),Object(r.b)("p",null,"Add ",Object(r.b)("inlineCode",{parentName:"p"},"MuiPickersUtilsProvider")," to ",Object(r.b)("inlineCode",{parentName:"p"},"packages/web/src/App.tsx"),":"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"This tells pickers which date management library it should use with MuiPickersUtilsProvider. This component takes a utils prop, and makes it available down the React tree with React Context. It should be used at the root of your component tree, or at the highest level you wish the pickers to be available.")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'// Add the imports\nimport DateFnsUtils from "@date-io/date-fns";\nimport { MuiPickersUtilsProvider } from "@material-ui/pickers";\n\n// ...\n\n   return (\n     <ApolloProvider client={client}>\n      {/* Add MuiPickersUtilsProvider wrapper */}\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Router>\n          {/* ... */}\n        </Router>\n      </MuiPickersUtilsProvider>\n     </ApolloProvider>\n   );\n }\n')),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"packages/web/src/components/CreateTodo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'// ...\n// Add the import\nimport { KeyboardDatePicker } from "@material-ui/pickers";\n\nexport default function CreateTodo() {\n  const [name, setName] = useState("");\n  const [createTodo, { loading }] = useCreateTodo();\n  // Use a react hook to store the input date state.\n  // Dates are optional. If not set, the value is null.\n  const [date, setDate] = useState<Date | null>(null);\n\n  function onSubmit() {\n    // Add "date" to the createTodo variables\n    createTodo({ variables: { name, date } });\n    setName("");\n    // Reset the input date to null after submission\n    setDate(null);\n  }\n\n  return (\n    <TextField\n      // ...\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position="end">\n            {/* Add KeyboardDatePicker component */}\n            <KeyboardDatePicker\n              disableToolbar\n              variant="inline"\n              format="M/dd/yyyy"\n              margin="normal"\n              label="Date"\n              value={date}\n              onChange={setDate}\n              KeyboardButtonProps={{\n                "aria-label": "change date",\n              }}\n            />\n            <IconButton aria-label="add" onClick={onSubmit} disabled={loading}>\n              <AddIcon />\n            </IconButton>\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n}\n')),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"ListItemText")," in ",Object(r.b)("inlineCode",{parentName:"p"},"packages/web/src/components/Todo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'<ListItemText\n  // If date is set, display it in the todo item\n  primary={`${todo.name}${\n    // toLocaleDateString("en-US") uses "M/dd/yyyy" date formatting\n    todo.date ? ` (${new Date(todo.date).toLocaleDateString("en-US")})` : ""\n  }`}\n  classes={todo.complete ? { primary: classes.complete } : undefined}\n/>\n')),Object(r.b)("p",null,"Make sure files are properly formatted and linted. In VSCode, with the recommended extensions, this happens automatically. Otherwise, from the root of the project run:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn prettier\nyarn lint\n")),Object(r.b)("p",null,"With the full stack running (",Object(r.b)("inlineCode",{parentName:"p"},"yarn start")," from root), navigate to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://localhost:3000"}),"http://localhost:3000"),". You should see your new todo date field! \ud83c\udf89"),Object(r.b)("img",{alt:"Add date web",src:"/img/add_date_web.png",width:"512"}),Object(r.b)("h2",{id:"mobile"},"Mobile"),Object(r.b)("p",null,"If ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/mobile"}),"mobile")," was included, then follow these steps to configure it for the new todo date field."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"We're using the ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/mmazzarolo/react-native-modal-datetime-picker"}),"react-native-modal-datetime-picker")," for the date picker.")),Object(r.b)("p",null,"First, install the package and dependency:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cd packages/mobile/\nyarn expo install react-native-modal-datetime-picker @react-native-community/datetimepicker\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"We're using ",Object(r.b)("inlineCode",{parentName:"em"},"yarn expo install")," to ensure Expo supported versions of the libraries are used. Since Expo uses native code in its SDK, typically only a single version of a library with native dependencies can be used per version of Expo. Expo handles this mapping with its install command. Learn more on the ",Object(r.b)("a",Object(n.a)({parentName:"em"},{href:"https://docs.expo.io/workflow/expo-cli/"}),"Expo docs"),".")),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"packages/mobile/src/components/CreateTodo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'// ...\n// Add the import\nimport { Text, TouchableOpacity } from "react-native";\nimport DateTimePickerModal from "react-native-modal-datetime-picker";\n\nconst styles = StyleSheet.create({\n  // ...\n  // React Native uses FlexBox. Add a new CSS class to make content inside\n  // horizontally laid out.\n  row: {\n    display: "flex",\n    flexDirection: "row",\n  },\n});\n\nexport default function CreateTodo() {\n  const [name, setName] = useState("");\n  const [createTodo] = useCreateTodo();\n  // Use a react hook to store the input date state.\n  // Dates are optional. If not set, the value is null.\n  const [date, setDate] = useState<Date | null>(null);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n\n  function onSubmit() {\n    // Add "date" to the createTodo variables\n    createTodo({ variables: { name, date } });\n    setName("");\n    // Reset the input date to null after submission\n    setDate(null);\n  }\n\n  return (\n    <View style={styles.root}>\n      <Input\n        placeholder="What needs to be done?"\n        value={name}\n        onChangeText={(text: string) => setName(text)}\n        onSubmitEditing={onSubmit}\n        rightIcon={\n          <View style={styles.row}>\n            {\n              // Add TouchableOpacity. This is a button that displays the modal\n              // to change the date.\n            }\n            <TouchableOpacity\n              style={styles.row}\n              accessibilityLabel="date"\n              onPress={() => setShowDatePicker(true)}\n            >\n              <Text>\n                {\n                  // toLocaleDateString("en-US") uses "M/dd/yyyy" date formatting\n                  date?.toLocaleDateString("en-US")\n                }\n              </Text>\n              <Icon name="event" />\n            </TouchableOpacity>\n            <Icon name="add" accessibilityLabel="submit" onPress={onSubmit} />\n          </View>\n        }\n      />\n      {\n        // Add the DateTimePickerModal. This is a modal that displays a date\n        // picker when the button is pressed.\n      }\n      <DateTimePickerModal\n        isVisible={showDatePicker}\n        mode="date"\n        onConfirm={(dueDate) => {\n          setDate(dueDate);\n          setShowDatePicker(false);\n        }}\n        onCancel={() => {\n          setDate(null);\n          setShowDatePicker(false);\n        }}\n      />\n    </View>\n  );\n}\n')),Object(r.b)("p",null,"Update ",Object(r.b)("inlineCode",{parentName:"p"},"ListItem.Title")," in ",Object(r.b)("inlineCode",{parentName:"p"},"packages/mobile/src/components/Todo.tsx"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'<ListItem.Title style={todo.complete ? styles.lineThrough : undefined}>\n  {\n    // If date is set, display it in the todo item\n    `${todo.name}${\n      // toLocaleDateString("en-US") uses "M/dd/yyyy" date formatting\n      todo.date ? ` (${new Date(todo.date).toLocaleDateString("en-US")})` : ""\n    }`\n  }\n</ListItem.Title>\n')),Object(r.b)("p",null,"Make sure files are properly formatted and linted. In VSCode, with the recommended extensions, this happens automatically. Otherwise, from the root of the project run:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn prettier\nyarn lint\n")),Object(r.b)("p",null,"With the full stack running (",Object(r.b)("inlineCode",{parentName:"p"},"yarn start")," from root), navigate to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://localhost:19002"}),"http://localhost:19002")," and bring up the application. You should see your new todo date field! \ud83c\udf89"),Object(r.b)("img",{alt:"Add date mobile",src:"/img/add_date_mobile.png",height:"512"}))}d.isMDXComponent=!0},90:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),m=n,u=p["".concat(s,".").concat(m)]||p[m]||b[m]||r;return a?o.a.createElement(u,i(i({ref:t},c),{},{components:a})):o.a.createElement(u,i({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<r;c++)s[c]=a[c];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);